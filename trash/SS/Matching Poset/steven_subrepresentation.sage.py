from __future__ import print_function
# This file was *autogenerated* from the file steven_subrepresentation.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_105 = Integer(105)

import itertools


def getPsi(lda, alpha):

    # pre-check (lda and alpha are both partition of n)
    if sum(lda) != sum(alpha):
        print("bad partition")
        return -_sage_const_1

    psi = _sage_const_0
    queue = [[lda, alpha, _sage_const_0 ]]
    while len(queue) != _sage_const_0 :
        arg = queue.pop(_sage_const_0 )
        if len(arg[_sage_const_1 ]) == _sage_const_0 :
            if len(arg[_sage_const_0 ]) == _sage_const_0 :
                psi += (-_sage_const_1 )**arg[_sage_const_2 ]
                #print("end " + str(arg[2]))
            else:
                print("error in getSubDiagram")
                break
        else:
            queue = queue + getSubDiagrams(arg[_sage_const_0 ],arg[_sage_const_1 ],arg[_sage_const_2 ])
    #print("psi=" + str(psi))
    return psi




# diagram comes from lda, height is the current strip height
def getSubDiagrams(lda, alpha, height):
    #print("---------------------------")
    #print(lda)
    # collect border
    border = []
    max_width_index = lda[_sage_const_0 ]-_sage_const_1
    max_height_index = len(lda)-_sage_const_1

    # row, col
    currentPt = (_sage_const_0 , max_width_index)
    bdEnd = (max_height_index, _sage_const_0 )
    while currentPt != bdEnd:
        #print(currentPt)
        border.append(currentPt)
        if (currentPt[_sage_const_0 ] < max_height_index) and (currentPt[_sage_const_1 ] <= lda[currentPt[_sage_const_0 ]+_sage_const_1 ]-_sage_const_1 ):
            currentPt = (currentPt[_sage_const_0 ]+_sage_const_1 , currentPt[_sage_const_1 ])
        elif currentPt[_sage_const_1 ] > _sage_const_0 :
            currentPt = (currentPt[_sage_const_0 ], currentPt[_sage_const_1 ]-_sage_const_1 )
        else:
            print("error")
            break
    border.append(bdEnd)

    # start point index in border
    start = [_sage_const_0 ]
    for i in range(_sage_const_1 , len(border)):
        if border[i][_sage_const_0 ]-_sage_const_1  == border[i-_sage_const_1 ][_sage_const_0 ]:
            start.append(i)
    #print(border)
    #print(start)
    # check against length, (current alpha[0])
    subDiagrams = []
    length = alpha[_sage_const_0 ]
    #print(length)
    for pt_index in start:
        # out of index bound
        if (pt_index+length-_sage_const_1 ) > (len(border) - _sage_const_1 ):
            continue
        # exactly at the end of border, good
        elif (pt_index+length-_sage_const_1 ) == (len(border) - _sage_const_1 ):

            subLda = list(lda)
            for i in range(pt_index, pt_index+length):
                subLda[border[i][_sage_const_0 ]]-=_sage_const_1
            while (len(subLda) > _sage_const_0 ) and (subLda[-_sage_const_1 ] == _sage_const_0 ):
                subLda.pop(-_sage_const_1 )
            subDiagrams.append([subLda, alpha[_sage_const_1 :],
                                height+border[pt_index+length-_sage_const_1 ][_sage_const_0 ]-border[pt_index][_sage_const_0 ]])

        # check direction of border at the end of strip to decide strip validity
        else:
            if border[pt_index+length][_sage_const_1 ] < border[pt_index+length-_sage_const_1 ][_sage_const_1 ]:
                subLda = list(lda)
                for i in range(pt_index, pt_index+length):
                    subLda[border[i][_sage_const_0 ]]-=_sage_const_1
                while (len(subLda) > _sage_const_0 ) and (subLda[-_sage_const_1 ] == _sage_const_0 ):
                    subLda.pop(-_sage_const_1 )
                subDiagrams.append([subLda, alpha[_sage_const_1 :],
                                    height+border[pt_index+length-_sage_const_1 ][_sage_const_0 ]-border[pt_index][_sage_const_0 ]])

    #print(len(subDiagrams))
    return subDiagrams

def applyPermutation(pm, perm):
    temp2 = []
    for number in pm:
        temp2.append(perm[number-_sage_const_1 ])
    permuted_pm = []
    for i in range(_sage_const_0 ,_sage_const_7 ,_sage_const_2 ):
        if temp2[i] < temp2[i+_sage_const_1 ]:
            permuted_pm.append([temp2[i], temp2[i+_sage_const_1 ]])
        else:
            permuted_pm.append([temp2[i+_sage_const_1 ], temp2[i]])
    permuted_pm = sorted(permuted_pm)
    newPm = []
    for connection in permuted_pm:
        newPm += connection
    return newPm

def pmToStr(pm):
    return ''.join(str(num) for num in pm)









ldaList = Partitions(_sage_const_4 ).list()
permList = list(itertools.permutations(list(range(_sage_const_1 ,_sage_const_9 ))))
pmListTemp = permList
pmList = []
invalidFlag = _sage_const_0
for pm in pmListTemp:
    if pm[_sage_const_0 ] != _sage_const_1 :
        continue

    for i in range(_sage_const_0 ,_sage_const_8 -_sage_const_3 ,_sage_const_2 ):
        if pm[i] >= pm[i+_sage_const_2 ]:
            invalidFlag = _sage_const_1
    if invalidFlag == _sage_const_1 :
        invalidFlag = _sage_const_0
        continue

    for i in range(_sage_const_0 ,_sage_const_8 -_sage_const_1 ,_sage_const_2 ):
        if pm[i] >= pm[i+_sage_const_1 ]:
            invalidFlag = _sage_const_1
    if invalidFlag == _sage_const_1 :
        invalidFlag = _sage_const_0
        continue



    # a valid pm
    pmList.append(pm)
pmList.sort()
pmDictionary = {}
for index,pm in enumerate(pmList):
    pmDictionary[pmToStr(pm)] = index


w,h = _sage_const_105 ,_sage_const_105

for lda in ldaList:
    print('start' + str(lda))
    matrix = [[_sage_const_0  for x in range(w)] for y in range(h)]
    lda = [i * _sage_const_2  for i in lda]
    for perm in permList:
        #print('start ' + str(perm))
        permObj = Permutation(list(perm))

        permMat = [[_sage_const_0  for x in range(w)] for y in range(h)]
        test1 = list(range(_sage_const_105 ))
        test2 = list(range(_sage_const_105 ))
        for pm in pmList:
            newPm = applyPermutation(pm, perm)
            #print(pmDictionary[pmToStr(newPm)],pmDictionary[pmToStr(pm)])
            test1.remove(pmDictionary[pmToStr(newPm)])
            test2.remove(pmDictionary[pmToStr(pm)])
            permMat[pmDictionary[pmToStr(newPm)]][pmDictionary[pmToStr(pm)]] = _sage_const_1
        if (len(test1) > _sage_const_0 ) or (len(test2) > _sage_const_0 ):
            print('error')



        #print('getpsi')


        alpha = permObj.cycle_type()
        # print str(alpha)+" "+str(lda)
        psi = getPsi(lda,alpha)

        for i in range(len(matrix)):
            for j in range(len(matrix[_sage_const_0 ])):
                matrix[i][j] = matrix[i][j] + psi*permMat[i][j]

        #print('end' + str(perm))



    print('end ' + str(lda))

    strmatrix = '['
    for i in range(len(matrix)):
        for j in range(len(matrix[_sage_const_0 ])):
            strmatrix += ' ' + str(matrix[i][j])
        strmatrix += ';\n'
    strmatrix += ']'
    with open('subrepresentation'+str(lda)+'.txt', 'w') as f:
        print(strmatrix, file=f)

